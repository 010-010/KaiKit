const KaiRouter = (function() {

  function KaiRouter(options) {

    this._404 = new Kai({ template: '404' });
    this.routes = {};
    this.stack = [];

    this._KaiRouter = function (options) {
      const public = ['routes'];
      for (var i in options) {
        if (public.indexOf(i) !== -1) { // allow override
          this[i] = options[i];
        }
      }
    }
    this._KaiRouter(options);
  }

  KaiRouter.prototype.run = function() {
    this.renderHeader();
    this.renderSoftKey();
    var hash = window.location.hash.replace(/\/$/, '');
    hash = hash === '' ? '/#' : hash;
    window.location = hash;
    const h = hash.split('/');
    h.forEach((path, k) => {
      if (path.length > 0) {
        if (k === (h.length - 1)) {
          if (this.routes[path]) {
            const component = this.routes['#'].component;
            if (component.isMounted === false) {
              this.stack.push(component);
            }
            component.router = this;
            component.mount('__kai_router__');
            this.addBackKeyListener();
          } else {
            this._404.mount('__kai_router__');
            this.addBackKeyListener();
            this.stack.push(this._404);
          }
        } else {
          if (this.routes[path]) {
            const clone = this.routes[path].component.clone();
            clone.router = this;
            this.stack.push(clone);
          }
          if (h.length === this.stack.length) {
            return;
          }
        }
      }
    });
    // console.log(this.stack);
  }

  KaiRouter.prototype.push = function(path) {
    if (typeof path === 'string' && this.routes[path]) {
      const clone = this.routes[path].component.clone();
      clone.router = this;
      clone.mount('__kai_router__');
      this.stack.push(clone);
    } else if (path instanceof Kai) {
      path.router = this;
      path.mount('__kai_router__');
      this.stack.push(path);
    } else {
      this._404.mount('__kai_router__');
      this.stack.push(this._404);
    }
    var hash = window.location.hash.replace(/\/$/, '');
    hash = hash === '' ? '/#' : hash;
    window.location = hash + '/' + path;
  }

  KaiRouter.prototype.pop = function() {
    var hash = window.location.hash.replace(/\/$/, '');
    var paths = hash.split('/');
    if (paths.length > 1 && this.stack.length > 1 && (paths.length === this.stack.length)) {
      paths.pop();
      this.stack.pop();
      this.stack[this.stack.length - 1].mount('__kai_router__');
      window.location = paths.join('/');
    } else {
      console.log('ROOT');
    }
  }

  KaiRouter.prototype.popUntil = function() {}

  KaiRouter.prototype.renderHeader = function() {
    const el = document.getElementById('__kai_header__');
    if (el) {
      el.innerHTML = '<span id="__kai_header_title__"></span>';
      el.style.color = '#fff';
      el.style.fontWeight = 'bold';
      el.style.verticalAlign = 'middle';
      el.style.backgroundColor = '#873eff';
      el.style.height = '28px';
      el.style.lineHeight = '28px';
      el.style.position = 'fixed';
      el.style.width =  '100%';
      el.style.top = '0';
      const b = document.getElementsByTagName("BODY")[0];
      b.style.paddingTop = '28px';
      this.setHeaderTitle('TEST');
    }
  }

  KaiRouter.prototype.setHeaderTitle = function(title) {
    const el = document.getElementById('__kai_header_title__');
    if (el) {
      el.innerHTML = title;
      el.style.marginLeft = '8px';
    }
  }

  KaiRouter.prototype.renderSoftKey = function() {
    const el = document.getElementById('__kai_soft_key__');
    if (el) {
      el.style.height = '30px';
      el.style.lineHeight = '30px';
      el.style.backgroundColor = '#cccccc';
      el.style.display = 'flex';
      el.style.alignItems = 'center';
      el.style.padding = '0 5px';
      el.style.color = '#323232';
      el.style.position = 'fixed';
      el.style.width =  '100%';
      el.style.bottom = '0';
      const b = document.getElementsByTagName("BODY")[0];
      b.style.paddingBottom = '30px';
    }
  }

  KaiRouter.prototype.setSoftKeyLeft = function() {}

  KaiRouter.prototype.setSoftKeyCenter = function() {}

  KaiRouter.prototype.setSoftKeyCenter = function() {}

  KaiRouter.prototype.handleBackKey = function(e) {
    switch(e.key) {
      case "BrowserBack":
      case 'Backspace':
      case 'EndCall':
        if (document.activeElement.tagName === 'INPUT') {
          if (document.activeElement.value.length === 0) {
            document.activeElement.blur();
          }
          e.preventDefault();
          e.stopPropagation();
        } else {
          if (this.children.length > 0) {
            const child = this.children[0];
            if (child.__kaikit__) {
              if (child.__kaikit__._router) {
                child.__kaikit__._router.pop();
              }
            }
          }
        }
        break
      default:
        console.log(e.key);
    }
  }

  KaiRouter.prototype.addBackKeyListener = function() {
    document.activeElement.addEventListener('keydown', this.handleBackKey);
  }

  KaiRouter.prototype.removeBackKeyListener = function() {
    document.activeElement.removeEventListener('keydown', this.handleBackKey);
  }

  return KaiRouter;

})();
